name: Build MagicKeyRevC

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-openssl
          mingw-w64-ucrt-x86_64-pkg-config
          make
    
    - name: Install additional dependencies
      shell: bash
      run: |
        # Ensure we have latest packages and essential Windows dependencies
        echo "Installing additional dependencies..."
        
        # Check what Visual C++ redistributables are available
        echo "Available VC++ redistributables:"
        ls -la "/c/Program Files/Microsoft Visual Studio/" 2>/dev/null || echo "Visual Studio not found"
        ls -la "/c/Program Files (x86)/Microsoft Visual Studio/" 2>/dev/null || echo "Visual Studio x86 not found"
    
    - name: Create config.h from secrets
      shell: bash
      run: |
        # Always create a fresh config.h to avoid secret masking issues
        echo "Creating clean config.h file"
        
        # Create base config with echo commands to avoid YAML issues
        echo '#pragma once' > config.h
        echo '#include <string>' >> config.h
        echo '' >> config.h
        echo 'namespace Config {' >> config.h
        echo '    static const std::string IPCHECK_URL = "https://ipcheck.siu4.workers.dev/";' >> config.h
        echo '    static const std::string PROXYCHECK_URL = "https://proxycheck.io/v2/";' >> config.h
        
        # Add BACKEND_URL (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.BACKEND_URL }}" ]; then
          echo "    static const std::string BACKEND_URL = \"${{ secrets.BACKEND_URL }}\";" >> config.h
        else
          echo '    static const std::string BACKEND_URL = "https://example.com/api";' >> config.h
        fi
        
        # Add LOGIN_BASE_URL (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.LOGIN_BASE_URL }}" ]; then
          echo "    static const std::string LOGIN_BASE_URL = \"${{ secrets.LOGIN_BASE_URL }}\";" >> config.h
        else
          echo '    static const std::string LOGIN_BASE_URL = "https://example.com/login";' >> config.h
        fi
        
        # Add USER_AGENT (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.USER_AGENT }}" ]; then
          echo "    static const std::string USER_AGENT = \"${{ secrets.USER_AGENT }}\";" >> config.h
        else
          echo '    static const std::string USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) WebView2";' >> config.h
        fi
        
        echo '    static const int TIMEOUT_MS = 30000;' >> config.h
        echo '    static const int RETRY_ATTEMPTS = 3;' >> config.h
        echo '    static const std::string PUBLIC_KEY_FILE = "";' >> config.h
        echo '    static const bool USE_EMBEDDED_KEY = true;' >> config.h
        echo '    static const bool DISABLE_DEVTOOLS = true;' >> config.h
        echo '    static const bool DISABLE_CONTEXT_MENU = true;' >> config.h
        echo '    static const bool DISABLE_TEXT_SELECTION = true;' >> config.h
        echo '    static const bool DISABLE_COPY_PASTE = true;' >> config.h
        echo '    static const std::string APP_VERSION = "1.01C";' >> config.h
        echo '    static const std::string APP_NAME = "MagicKeyRevC";' >> config.h
        
        # Add DCID (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.DCID }}" ]; then
          echo "    static const std::string DCID = \"${{ secrets.DCID }}\";" >> config.h
        else
          echo '    static const std::string DCID = "default";' >> config.h
        fi
        
        echo '    static const int WINDOW_WIDTH = 900;' >> config.h
        echo '    static const int WINDOW_HEIGHT = 700;' >> config.h
        echo '    static const bool DEBUG_ENABLED = false;' >> config.h
        echo '    static const bool LOG_ENCRYPTED_DATA = false;' >> config.h
        echo '    static const bool LOG_SERVER_RESPONSES = false;' >> config.h
        echo '    static const bool LOG_SYSTEM_INFO = false;' >> config.h
        echo '}' >> config.h
        echo '' >> config.h
        
        # Add compatibility class (simpler approach)
        echo 'class ConfigCompat {' >> config.h
        echo 'public:' >> config.h
        echo '    std::string get_ipcheck_url() { return Config::IPCHECK_URL; }' >> config.h
        echo '    std::string get_proxycheck_url() { return Config::PROXYCHECK_URL; }' >> config.h
        echo '    std::string get_backend_url() { return Config::BACKEND_URL; }' >> config.h
        echo '    std::string get_login_base_url() { return Config::LOGIN_BASE_URL; }' >> config.h
        echo '    std::string get_user_agent() { return Config::USER_AGENT; }' >> config.h
        echo '    std::string get_public_key_file() { return Config::PUBLIC_KEY_FILE; }' >> config.h
        echo '    std::string get_app_version() { return Config::APP_VERSION; }' >> config.h
        echo '    std::string get_app_name() { return Config::APP_NAME; }' >> config.h
        echo '    std::string get_dcid() { return Config::DCID; }' >> config.h
        echo '    int get_window_width() { return Config::WINDOW_WIDTH; }' >> config.h
        echo '    int get_window_height() { return Config::WINDOW_HEIGHT; }' >> config.h
        echo '    int get_timeout_ms() { return Config::TIMEOUT_MS; }' >> config.h
        echo '    int get_retry_attempts() { return Config::RETRY_ATTEMPTS; }' >> config.h
        echo '    bool is_debug_enabled() { return Config::DEBUG_ENABLED; }' >> config.h
        echo '    bool should_log_encrypted_data() { return Config::LOG_ENCRYPTED_DATA; }' >> config.h
        echo '    bool should_log_server_responses() { return Config::LOG_SERVER_RESPONSES; }' >> config.h
        echo '    bool should_log_system_info() { return Config::LOG_SYSTEM_INFO; }' >> config.h
        echo '    bool should_disable_devtools() { return Config::DISABLE_DEVTOOLS; }' >> config.h
        echo '    bool should_disable_context_menu() { return Config::DISABLE_CONTEXT_MENU; }' >> config.h
        echo '    bool should_disable_text_selection() { return Config::DISABLE_TEXT_SELECTION; }' >> config.h
        echo '    bool should_disable_copy_paste() { return Config::DISABLE_COPY_PASTE; }' >> config.h
        echo '};' >> config.h
        echo '' >> config.h
        echo 'extern ConfigCompat* g_config;' >> config.h
        echo '' >> config.h
        echo 'inline void init_config(const std::string& config_file = "") {' >> config.h
        echo '    if (!g_config) {' >> config.h
        echo '        g_config = new ConfigCompat();' >> config.h
        echo '    }' >> config.h
        echo '}' >> config.h
        echo '' >> config.h
        echo 'inline void cleanup_config() {' >> config.h
        echo '    if (g_config) {' >> config.h
        echo '        delete g_config;' >> config.h
        echo '        g_config = nullptr;' >> config.h
        echo '    }' >> config.h
        echo '}' >> config.h
        
        echo "Config.h created successfully"
    
    - name: Verify build environment
      shell: msys2 {0}
      run: |
        echo "Checking build environment..."
        echo "GCC version:"
        gcc --version
        echo "Available DLLs in /ucrt64/bin:"
        ls -la /ucrt64/bin/libgcc* /ucrt64/bin/libstdc* /ucrt64/bin/libwinpthread* /ucrt64/bin/libssl* /ucrt64/bin/libcrypto* 2>/dev/null || echo "Some DLLs not found"
        echo "WebView2 files in workspace:"
        ls -la WebView2* lib* 2>/dev/null || echo "Some WebView2 files not found"
    
    - name: Create public_key.pem from secrets
      shell: bash
      run: |
        if [ -n "${{ secrets.PUBLIC_KEY_PEM }}" ]; then
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > public_key.pem
        else
          echo "Warning: PUBLIC_KEY_PEM secret not set"
          if [ -f "public_key.pem.example" ]; then
            cp public_key.pem.example public_key.pem
            echo "Using public_key.pem.example"
          elif [ ! -f "public_key.pem" ]; then
            echo "Creating dummy public_key.pem"
            echo "-----BEGIN PUBLIC KEY-----" > public_key.pem
            echo "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1234567890abcdef" >> public_key.pem
            echo "1234567890abcdef1234567890abcdef1234567890abcdef1234567890ab" >> public_key.pem
            echo "cdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890" >> public_key.pem
            echo "abcdef1234567890abcdef1234567890abcdef1234567890abcdef12345678" >> public_key.pem
            echo "90abcdef1234567890abcdef1234567890abcdef1234567890abcdef123456" >> public_key.pem
            echo "7890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234" >> public_key.pem
            echo "QIDAQAB" >> public_key.pem
            echo "-----END PUBLIC KEY-----" >> public_key.pem
          fi
        fi
    
    - name: Embed public key in source code
      shell: bash
      run: |
        echo "Embedding public key in source code..."
        
        # Create embedded_key.h with the public key as a string constant
        echo '#pragma once' > embedded_key.h
        echo '#include <string>' >> embedded_key.h
        echo '' >> embedded_key.h
        echo 'namespace EmbeddedKey {' >> embedded_key.h
        echo '    static const std::string PUBLIC_KEY_PEM = R"(' >> embedded_key.h
        cat public_key.pem >> embedded_key.h
        echo ')";' >> embedded_key.h
        echo '}' >> embedded_key.h
        
        echo "Public key embedded successfully"
        echo "Embedded key file preview:"
        head -10 embedded_key.h
    
    - name: Build application
      shell: msys2 {0}
      run: |
        echo "Starting compilation..."
        # Partial static linking - OpenSSL + MinGW static, WebView2 dynamic
        g++ -O2 -s -static-libgcc -static-libstdc++ *.cpp \
          -o main.exe \
          -lole32 -loleaut32 -lwbemuuid -lwininet \
          -Wl,-Bstatic -lssl -lcrypto -Wl,-Bdynamic \
          -lbcrypt -lcrypt32 -lgdi32 -lws2_32 \
          -L. -I./include \
          ./WebView2Loader.dll.lib
        
        echo "Build completed. Checking executable..."
        if [ -f "main.exe" ]; then
          echo "main.exe created successfully"
          ls -la main.exe
          
          # Check dependencies
          echo "Checking dependencies:"
          objdump -p main.exe | grep "DLL Name" | head -20 || echo "Could not check dependencies"
        else
          echo "Error: main.exe not found after compilation"
          exit 1
        fi
    
    - name: Create distribution package
      shell: bash
      run: |
        mkdir -p dist
        cp main.exe dist/
        
        echo "Partial static build - OpenSSL and MinGW runtime embedded, only WebView2 DLL needed!"
        
        # Copy only the WebView2 DLL (required)
        echo "Copying WebView2 DLL..."
        cp WebView2Loader.dll dist/ && echo "✓ Copied WebView2Loader.dll" || echo "✗ Failed to copy WebView2Loader.dll"
        
        # Verify the executable dependencies
        echo "Checking dependencies of partially static executable:"
        objdump -p dist/main.exe | grep "DLL Name" | head -20 || echo "Could not check dependencies"
        
        echo "Final distribution contents:"
        ls -la dist/
        
        # Count files and show size
        file_count=$(ls -1 dist/ | wc -l)
        main_size=$(stat -c%s "dist/main.exe" 2>/dev/null || echo "unknown")
        echo "✅ Package contains $file_count files, main.exe size: $main_size bytes"
    
    - name: Create ZIP package for release
      shell: bash
      run: |
        # Create release package with proper naming
        RELEASE_NAME="MagicKeyRevC-$(date +'%Y.%m.%d-%H%M')-Optimized"
        echo "Creating ZIP package: ${RELEASE_NAME}.zip"
        
        # Create a clean release directory
        mkdir -p release
        
        # Copy the executable and required DLL
        cp dist/main.exe release/
        cp dist/WebView2Loader.dll release/
        
        # Create a simple README for users
        cat > release/README.txt << 'EOF'
        MagicKeyRevC - Optimized Build
        
        This is an optimized executable with minimal dependencies.
        
        Installation:
        1. Extract the ZIP file
        2. Run main.exe directly
        
        Features:
        - OpenSSL libraries embedded (no separate crypto DLLs needed)
        - MinGW runtime embedded (no separate MinGW DLLs needed)
        - Only WebView2Loader.dll required for web interface
        - Small package size with maximum compatibility
        
        Package Contents:
        - main.exe (main application with embedded libraries)
        - WebView2Loader.dll (web interface component)
        
        Total files: 2 (much smaller than before!)
        EOF
        
        # Create ZIP archive (using PowerShell for better Windows compatibility)
        powershell -Command "Compress-Archive -Path 'release\*' -DestinationPath '${RELEASE_NAME}.zip' -Force"
        
        # Verify ZIP was created and show contents
        if [ -f "${RELEASE_NAME}.zip" ]; then
          echo "✅ Optimized ZIP package created successfully!"
          ls -la "${RELEASE_NAME}.zip"
          
          # Show ZIP contents
          echo "ZIP package contents:"
          unzip -l "${RELEASE_NAME}.zip" 2>/dev/null || powershell -Command "Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::OpenRead('${RELEASE_NAME}.zip').Entries | Select-Object Name, Length"
        else
          echo "❌ Failed to create ZIP package!"
          exit 1
        fi
        
        # Store ZIP name for later use
        echo "ZIP_FILE=${RELEASE_NAME}.zip" >> $GITHUB_ENV
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MagicKeyRevC-${{ github.sha }}
        path: |
          dist/
          *.zip
        retention-days: 30
    
    - name: Get current date and time
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: datetime
      shell: bash
      run: |
        echo "tag=v$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
        echo "name=MagicKeyRevC-$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
    
    - name: Create tag and release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: ${{ steps.datetime.outputs.tag }}
        REPO_NAME: ${{ github.repository }}
      run: |
        # Configure git with token authentication
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Debug: Show what we're working with
        echo "Creating tag: ${TAG_NAME}"
        echo "Repository: ${REPO_NAME}"
        
        # Create tag
        git tag "${TAG_NAME}"
        
        # Push tag using token authentication
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_NAME}.git"
        git push origin "${TAG_NAME}"
        
        # Verify tag was created successfully
        if git ls-remote --tags origin | grep -q "${TAG_NAME}"; then
          echo "Tag ${TAG_NAME} successfully created and pushed"
          echo "tag_created=true" >> $GITHUB_OUTPUT
        else
          echo "Failed to create or push tag"
          exit 1
        fi
      id: create_tag
    
    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.create_tag.outputs.tag_created == 'true'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_NAME: ${{ steps.datetime.outputs.tag }}
        RELEASE_NAME: ${{ steps.datetime.outputs.name }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: ${{ env.RELEASE_NAME }}
        body: |
          **📦 MagicKeyRevC - Optimized Release**
          
          🔨 **Built from**: ${{ github.sha }}  
          🌿 **Branch**: ${{ github.ref_name }}  
          📅 **Build Date**: $(date +'%Y-%m-%d %H:%M UTC')
          
          ## 📋 **Package Contents**
          
          ✅ **Minimal dependency package** - Only 2 files needed!
          
          **Included files:**
          - `main.exe` - Complete standalone application (all libraries embedded)
          - `README.txt` - Installation instructions
          
          ## 🚀 **Installation**
          
          1. Download the `.zip` file below
          2. Extract to any folder
          3. Run `main.exe` - that's it!
          
          ## 🔐 **Features**
          
          - ✅ **Zero Dependencies** - No DLLs, no installation required
          - ✅ **Fully Portable** - Run from any location (USB drive, network share, etc.)
          - ✅ **Embedded RSA Encryption** - Built-in security
          - ✅ **Static Linking** - All libraries compiled into the executable
          - ✅ **Larger file size** but **maximum compatibility**
          
          ## � **Technical Details**
          
          - All MinGW/GCC libraries statically linked
          - OpenSSL libraries embedded
          - WebView2 support included
          - No Visual C++ Redistributable required
          - Works on any Windows 10+ system
        files: MagicKeyRevC-*.zip
        draft: false
        prerelease: false
    
    - name: Create Release (on manual tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: MagicKeyRevC-*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
