name: Build MagicKeyRevC

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-openssl
          mingw-w64-ucrt-x86_64-pkg-config
          make
    
    - name: Create config.h from secrets
      shell: bash
      run: |
        # Ensure we have a base config.h file
        if [ ! -f "config.h" ]; then
          if [ -f "config.h.example" ]; then
            echo "Using config.h.example as base"
            cp config.h.example config.h
          else
            echo "No config.h found, build will use existing files"
          fi
        fi
        
        # Apply secrets if available and not a PR
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.BACKEND_URL }}" ]; then
          echo "Applying secrets to config.h"
          
          # Only make backup if file exists
          if [ -f "config.h" ]; then
            cp config.h config.h.backup
            
            # Replace key values if secrets are provided
            if [ -n "${{ secrets.BACKEND_URL }}" ]; then
              sed -i 's|static const std::string BACKEND_URL = "[^"]*"|static const std::string BACKEND_URL = "${{ secrets.BACKEND_URL }}"|' config.h
            fi
            
            if [ -n "${{ secrets.DCID }}" ]; then
              sed -i 's|static const std::string DCID = "[^"]*"|static const std::string DCID = "${{ secrets.DCID }}"|' config.h
            fi
            
            if [ -n "${{ secrets.LOGIN_BASE_URL }}" ]; then
              sed -i 's|static const std::string LOGIN_BASE_URL = "[^"]*"|static const std::string LOGIN_BASE_URL = "${{ secrets.LOGIN_BASE_URL }}"|' config.h
            fi
            
            if [ -n "${{ secrets.USER_AGENT }}" ]; then
              sed -i 's|static const std::string USER_AGENT = "[^"]*"|static const std::string USER_AGENT = "${{ secrets.USER_AGENT }}"|' config.h
            fi
          fi
        else
          echo "Using default config.h (no secrets applied)"
        fi
    
    - name: Create public_key.pem from secrets
      shell: bash
      run: |
        if [ -n "${{ secrets.PUBLIC_KEY_PEM }}" ]; then
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > public_key.pem
        else
          echo "Warning: PUBLIC_KEY_PEM secret not set"
          if [ -f "public_key.pem.example" ]; then
            cp public_key.pem.example public_key.pem
            echo "Using public_key.pem.example"
          elif [ ! -f "public_key.pem" ]; then
            echo "Creating dummy public_key.pem"
            echo "-----BEGIN PUBLIC KEY-----" > public_key.pem
            echo "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1234567890abcdef" >> public_key.pem
            echo "1234567890abcdef1234567890abcdef1234567890abcdef1234567890ab" >> public_key.pem
            echo "cdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890" >> public_key.pem
            echo "abcdef1234567890abcdef1234567890abcdef1234567890abcdef12345678" >> public_key.pem
            echo "90abcdef1234567890abcdef1234567890abcdef1234567890abcdef123456" >> public_key.pem
            echo "7890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234" >> public_key.pem
            echo "QIDAQAB" >> public_key.pem
            echo "-----END PUBLIC KEY-----" >> public_key.pem
          fi
        fi
    
    - name: Build application
      shell: msys2 {0}
      run: |
        g++ -O2 -s -static-libgcc -static-libstdc++ *.cpp \
          -o main.exe \
          -lole32 -loleaut32 -lwbemuuid -lwininet \
          -lssl -lcrypto -lbcrypt -lcrypt32 -lgdi32 -lws2_32 \
          -L. -I./include \
          ./WebView2Loader.dll.lib
    
    - name: Create distribution package
      shell: bash
      run: |
        mkdir -p dist
        cp main.exe dist/
        cp WebView2Loader.dll dist/
        cp public_key.pem dist/
        
        # Copy MinGW runtime DLLs
        cp /ucrt64/bin/libgcc_s_seh-1.dll dist/ || true
        cp /ucrt64/bin/libstdc++-6.dll dist/ || true
        cp /ucrt64/bin/libwinpthread-1.dll dist/ || true
        
        # Copy OpenSSL DLLs
        cp /ucrt64/bin/libssl-3-x64.dll dist/ || true
        cp /ucrt64/bin/libcrypto-3-x64.dll dist/ || true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MagicKeyRevC-${{ github.sha }}
        path: dist/
        retention-days: 30
    
    - name: Get current date and time
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: datetime
      run: |
        echo "tag=v$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
        echo "name=MagicKeyRevC-$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
    
    - name: Create tag and release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create and push tag
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.datetime.outputs.tag }}
        git push origin ${{ steps.datetime.outputs.tag }}
        
        echo "Created tag: ${{ steps.datetime.outputs.tag }}"
    
    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.datetime.outputs.tag }}
        name: ${{ steps.datetime.outputs.name }}
        body: |
          **Automated Release**
          
          Built from commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          
          **Changes:**
          - Latest build of MagicKeyRevC
          - All dependencies included
          - Ready to run executable
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release (on manual tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
