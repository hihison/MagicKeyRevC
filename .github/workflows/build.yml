name: Build MagicKeyRevC

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-gcc
          mingw-w64-ucrt-x86_64-openssl
          mingw-w64-ucrt-x86_64-pkg-config
          make
    
    - name: Create config.h from secrets
      shell: bash
      run: |
        # Always create a fresh config.h to avoid secret masking issues
        echo "Creating clean config.h file"
        
        # Create base config with echo commands to avoid YAML issues
        echo '#pragma once' > config.h
        echo '#include <string>' >> config.h
        echo '' >> config.h
        echo 'namespace Config {' >> config.h
        echo '    static const std::string IPCHECK_URL = "https://ipcheck.siu4.workers.dev/";' >> config.h
        echo '    static const std::string PROXYCHECK_URL = "https://proxycheck.io/v2/";' >> config.h
        
        # Add BACKEND_URL (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.BACKEND_URL }}" ]; then
          echo "    static const std::string BACKEND_URL = \"${{ secrets.BACKEND_URL }}\";" >> config.h
        else
          echo '    static const std::string BACKEND_URL = "https://example.com/api";' >> config.h
        fi
        
        # Add LOGIN_BASE_URL (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.LOGIN_BASE_URL }}" ]; then
          echo "    static const std::string LOGIN_BASE_URL = \"${{ secrets.LOGIN_BASE_URL }}\";" >> config.h
        else
          echo '    static const std::string LOGIN_BASE_URL = "https://example.com/login";' >> config.h
        fi
        
        # Add USER_AGENT (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.USER_AGENT }}" ]; then
          echo "    static const std::string USER_AGENT = \"${{ secrets.USER_AGENT }}\";" >> config.h
        else
          echo '    static const std::string USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) WebView2";' >> config.h
        fi
        
        echo '    static const int TIMEOUT_MS = 30000;' >> config.h
        echo '    static const int RETRY_ATTEMPTS = 3;' >> config.h
        echo '    static const std::string PUBLIC_KEY_FILE = "public_key.pem";' >> config.h
        echo '    static const bool DISABLE_DEVTOOLS = true;' >> config.h
        echo '    static const bool DISABLE_CONTEXT_MENU = true;' >> config.h
        echo '    static const bool DISABLE_TEXT_SELECTION = true;' >> config.h
        echo '    static const bool DISABLE_COPY_PASTE = true;' >> config.h
        echo '    static const std::string APP_VERSION = "1.01C";' >> config.h
        echo '    static const std::string APP_NAME = "MagicKeyRevC";' >> config.h
        
        # Add DCID (with secret if available)
        if [ "${{ github.event_name }}" != "pull_request" ] && [ -n "${{ secrets.DCID }}" ]; then
          echo "    static const std::string DCID = \"${{ secrets.DCID }}\";" >> config.h
        else
          echo '    static const std::string DCID = "default";' >> config.h
        fi
        
        echo '    static const int WINDOW_WIDTH = 900;' >> config.h
        echo '    static const int WINDOW_HEIGHT = 700;' >> config.h
        echo '    static const bool DEBUG_ENABLED = false;' >> config.h
        echo '    static const bool LOG_ENCRYPTED_DATA = false;' >> config.h
        echo '    static const bool LOG_SERVER_RESPONSES = false;' >> config.h
        echo '    static const bool LOG_SYSTEM_INFO = false;' >> config.h
        echo '}' >> config.h
        echo '' >> config.h
        
        # Add compatibility class (simpler approach)
        echo 'class ConfigCompat {' >> config.h
        echo 'public:' >> config.h
        echo '    std::string get_ipcheck_url() { return Config::IPCHECK_URL; }' >> config.h
        echo '    std::string get_proxycheck_url() { return Config::PROXYCHECK_URL; }' >> config.h
        echo '    std::string get_backend_url() { return Config::BACKEND_URL; }' >> config.h
        echo '    std::string get_login_base_url() { return Config::LOGIN_BASE_URL; }' >> config.h
        echo '    std::string get_user_agent() { return Config::USER_AGENT; }' >> config.h
        echo '    std::string get_public_key_file() { return Config::PUBLIC_KEY_FILE; }' >> config.h
        echo '    std::string get_app_version() { return Config::APP_VERSION; }' >> config.h
        echo '    std::string get_app_name() { return Config::APP_NAME; }' >> config.h
        echo '    std::string get_dcid() { return Config::DCID; }' >> config.h
        echo '    int get_window_width() { return Config::WINDOW_WIDTH; }' >> config.h
        echo '    int get_window_height() { return Config::WINDOW_HEIGHT; }' >> config.h
        echo '    int get_timeout_ms() { return Config::TIMEOUT_MS; }' >> config.h
        echo '    int get_retry_attempts() { return Config::RETRY_ATTEMPTS; }' >> config.h
        echo '    bool is_debug_enabled() { return Config::DEBUG_ENABLED; }' >> config.h
        echo '    bool should_log_encrypted_data() { return Config::LOG_ENCRYPTED_DATA; }' >> config.h
        echo '    bool should_log_server_responses() { return Config::LOG_SERVER_RESPONSES; }' >> config.h
        echo '    bool should_log_system_info() { return Config::LOG_SYSTEM_INFO; }' >> config.h
        echo '    bool should_disable_devtools() { return Config::DISABLE_DEVTOOLS; }' >> config.h
        echo '    bool should_disable_context_menu() { return Config::DISABLE_CONTEXT_MENU; }' >> config.h
        echo '    bool should_disable_text_selection() { return Config::DISABLE_TEXT_SELECTION; }' >> config.h
        echo '    bool should_disable_copy_paste() { return Config::DISABLE_COPY_PASTE; }' >> config.h
        echo '};' >> config.h
        echo '' >> config.h
        echo 'extern ConfigCompat* g_config;' >> config.h
        echo '' >> config.h
        echo 'inline void init_config(const std::string& config_file = "") {' >> config.h
        echo '    if (!g_config) {' >> config.h
        echo '        g_config = new ConfigCompat();' >> config.h
        echo '    }' >> config.h
        echo '}' >> config.h
        echo '' >> config.h
        echo 'inline void cleanup_config() {' >> config.h
        echo '    if (g_config) {' >> config.h
        echo '        delete g_config;' >> config.h
        echo '        g_config = nullptr;' >> config.h
        echo '    }' >> config.h
        echo '}' >> config.h
        
        echo "Config.h created successfully"
    
    - name: Create public_key.pem from secrets
      shell: bash
      run: |
        if [ -n "${{ secrets.PUBLIC_KEY_PEM }}" ]; then
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > public_key.pem
        else
          echo "Warning: PUBLIC_KEY_PEM secret not set"
          if [ -f "public_key.pem.example" ]; then
            cp public_key.pem.example public_key.pem
            echo "Using public_key.pem.example"
          elif [ ! -f "public_key.pem" ]; then
            echo "Creating dummy public_key.pem"
            echo "-----BEGIN PUBLIC KEY-----" > public_key.pem
            echo "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1234567890abcdef" >> public_key.pem
            echo "1234567890abcdef1234567890abcdef1234567890abcdef1234567890ab" >> public_key.pem
            echo "cdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890" >> public_key.pem
            echo "abcdef1234567890abcdef1234567890abcdef1234567890abcdef12345678" >> public_key.pem
            echo "90abcdef1234567890abcdef1234567890abcdef1234567890abcdef123456" >> public_key.pem
            echo "7890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234" >> public_key.pem
            echo "QIDAQAB" >> public_key.pem
            echo "-----END PUBLIC KEY-----" >> public_key.pem
          fi
        fi
    
    - name: Build application
      shell: msys2 {0}
      run: |
        g++ -O2 -s -static-libgcc -static-libstdc++ *.cpp \
          -o main.exe \
          -lole32 -loleaut32 -lwbemuuid -lwininet \
          -lssl -lcrypto -lbcrypt -lcrypt32 -lgdi32 -lws2_32 \
          -L. -I./include \
          ./WebView2Loader.dll.lib
    
    - name: Create distribution package
      shell: bash
      run: |
        mkdir -p dist
        cp main.exe dist/
        cp WebView2Loader.dll dist/
        cp public_key.pem dist/
        
        # Copy MinGW runtime DLLs
        cp /ucrt64/bin/libgcc_s_seh-1.dll dist/ || true
        cp /ucrt64/bin/libstdc++-6.dll dist/ || true
        cp /ucrt64/bin/libwinpthread-1.dll dist/ || true
        
        # Copy OpenSSL DLLs
        cp /ucrt64/bin/libssl-3-x64.dll dist/ || true
        cp /ucrt64/bin/libcrypto-3-x64.dll dist/ || true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MagicKeyRevC-${{ github.sha }}
        path: dist/
        retention-days: 30
    
    - name: Get current date and time
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: datetime
      run: |
        echo "tag=v$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
        echo "name=MagicKeyRevC-$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
    
    - name: Create tag and release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git with token authentication
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create tag
        git tag ${{ steps.datetime.outputs.tag }}
        
        # Push tag using token authentication
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        git push origin ${{ steps.datetime.outputs.tag }}
        
        echo "Created tag: ${{ steps.datetime.outputs.tag }}"
    
    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.datetime.outputs.tag }}
        name: ${{ steps.datetime.outputs.name }}
        body: |
          **Automated Release**
          
          Built from commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          
          **Changes:**
          - Latest build of MagicKeyRevC
          - All dependencies included
          - Ready to run executable
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release (on manual tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
